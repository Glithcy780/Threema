// ## Device to Device Protocol
//
// ### General Information
//
// Encryption format: 24 byte nonce prepended, followed by an NaCl box.
//
// All strings are UTF-8 encoded.

syntax = "proto3";

package d2d;

option java_package = "ch.threema.protobuf.d2d";

import "common.proto";
import "md-d2d-sync.proto";

// Data shared across all devices and transmitted during the handshake.
message SharedDeviceData {
  // Random amount of padding, ignored by the receiver
  bytes padding = 1;

  // Current lowest protocol version that must be supported by all devices
  uint32 version = 2;

  // MDM parameters to be applied on all devices
  sync.MdmParameters mdm_parameters = 3;
}

// Metadata about a device, determined by the device itself.
message DeviceInfo {
  // Random amount of padding, ignored by the receiver
  bytes padding = 1;

  // Platform
  enum Platform {
    // Unknown platform
    UNSPECIFIED = 0;
    // Android
    ANDROID = 1;
    // Apple iOS
    IOS = 2;
    // Desktop application
    DESKTOP = 3;
    // Web application
    WEB = 4;
  }
  Platform platform = 2;

  // Platform details (smartphone model / browser), e.g. "Firefox 91.0.2" or
  // "iPhone 11 Pro"
  string platform_details = 3;

  // App version, e.g. "4.52" (Android) or "4.6.12b2653" (iOS)
  string app_version = 4;

  // User defined device label (e.g. "PC at Work"), may be empty if not set.
  // Recommended to not not exceed 64 grapheme clusters.
  string label = 5;
}

// A transaction scope. Used in the d2m transaction messages.
message TransactionScope {
  enum Scope {
    USER_PROFILE_SYNC = 0;
    CONTACT_SYNC = 1;
    GROUP_SYNC = 2;
    DISTRIBUTION_LIST_SYNC = 3;
    SETTINGS_SYNC = 4;
    NEW_DEVICE_SYNC = 5;
  }
  Scope scope = 1;
}

// Root message
message Envelope {
  // Random amount of padding, ignored by the receiver
  bytes padding = 1;

  // The enveloped reflected message
  oneof content {
    OutgoingMessage outgoing_message = 2;
    OutgoingMessageUpdate outgoing_message_update = 10;
    IncomingMessage incoming_message = 4;
    IncomingMessageUpdate incoming_message_update = 11;
    UserProfileSync user_profile_sync = 5;
    ContactSync contact_sync = 6;
    GroupSync group_sync = 7;
    DistributionListSync distribution_list_sync = 8;
    SettingsSync settings_sync = 9;
  };
}



// Message type as defined by the Chat Server Protocol.
enum MessageType {
  // Invalid message type
  INVALID = 0x00;

  // Text message
  TEXT = 0x01;
  // Deprecated image message
  DEPRECATED_IMAGE = 0x02;
  // Location message
  LOCATION = 0x10;
  // Deprecated audio message
  DEPRECATED_AUDIO = 0x14;
  // Deprecated video message
  DEPRECATED_VIDEO = 0x13;
  // File message
  FILE = 0x17;
  // Create or finalise a poll
  POLL_SETUP = 0x15;
  // Cast a vote on a poll
  POLL_VOTE = 0x16;
  // Call offer
  CALL_OFFER = 0x60;
  // Call answer
  CALL_ANSWER = 0x61;
  // Call ICE Candidate
  CALL_ICE_CANDIDATE = 0x62;
  // Call hangup
  CALL_HANGUP = 0x63;
  // Call ringing
  CALL_RINGING = 0x64;

  // Delivery receipt
  DELIVERY_RECEIPT = 0x80;
  // Typing indicator
  TYPING_INDICATOR = 0x90;

  // Set profile picture of a contact
  CONTACT_SET_PROFILE_PICTURE = 0x18;
  // Delete profile picture of a contact
  CONTACT_DELETE_PROFILE_PICTURE = 0x19;
  // Request profile picture of a contact
  CONTACT_REQUEST_PROFILE_PICTURE = 0x1a;

  // Announce a group's setup
  GROUP_SETUP = 0x4a;
  // (Re)name a group
  GROUP_NAME = 0x4b;
  // Leave a group
  GROUP_LEAVE = 0x4c;
  // Set a group's profile picture
  GROUP_SET_PROFILE_PICTURE = 0x50;
  // Delete a group's profile picture
  GROUP_DELETE_PROFILE_PICTURE = 0x54;
  // Request group synchronisation
  GROUP_REQUEST_SYNC = 0x51;

  // Group text message
  GROUP_TEXT = 0x41;
  // Group location message
  GROUP_LOCATION = 0x42;
  // Group image message
  GROUP_IMAGE = 0x43;
  // Group audio message
  GROUP_AUDIO = 0x45;
  // Group video message
  GROUP_VIDEO = 0x44;
  // Group file message
  GROUP_FILE = 0x46;
  // Create or finalise a group poll
  GROUP_POLL_SETUP = 0x52;
  // Cast a vote on a group poll
  GROUP_POLL_VOTE = 0x53;

  // Group delivery receipt
  GROUP_DELIVERY_RECEIPT = 0x81;
}

// Unique conversation identifier.
message ConversationId {
  // A contact's Threema ID, distribution list ID or group identity to identify
  // the conversation.
  oneof id {
    string contact = 1;
    fixed64 distribution_list = 2;
    common.GroupIdentity group = 3;
  }
}

// An outgoing message, reflected to other devices.
//
// When sending this message:
//
// 1. [...]
// 2. Set `nonces` to the nonces of the associated CSP
//    `e2e.message-with-metadata` (or `e2e.legacy-message`) messages that
//    contained the `body` in encrypted form.ยน
//
// When receiving this message:
//
// 1. [...]
// 2. Add all `nonces` to the CSP nonce storage, preventing messages from being
//    replayed.
//
// ยน: For contacts and distribution lists, there will be exactly one nonce. For
// groups, there will be as many nonces as there are group members minus one.
message OutgoingMessage {
  // Conversation ID of the enclosed message.
  //
  // Note: If the conversation is of type group, group and group creator id of
  // the enclosed CSP E2E message must match the values of the supplied group
  // identity. Otherwise, the message must be considered invalid.
  ConversationId conversation = 1;

  // Unique ID of the enclosed message
  fixed64 message_id = 2;

  // Optional thread message ID (the message ID of the last incoming message in
  // the current conversation)
  optional fixed64 thread_message_id = 6;

  // Unix-ish timestamp in milliseconds for when the enclosed message has been
  // created
  //
  // Note: Take this value from the
  // `csp.payload.legacy-message`/`csp.payload.message-with-metadata-box` that
  // enclosed the message.
  uint64 created_at = 3;

  // Enclosed message's type, mapped from `csp.e2e.container.type`
  MessageType type = 4;

  // The message's body, i.e. the unpadded `csp.e2e.container.padded-data`
  bytes body = 5;

  // Nonces the message was encrypted with towards each receiver (the shared
  // secret derived from the long-term keys).
  //
  // Optional for now, always required in a future version.
  repeated bytes nonces = 7;
}

// Update one or more existing outgoing messages.
message OutgoingMessageUpdate {
  // Mark the referred message as sent (acknowledged by the chat server).
  //
  // Note 1: The timestamp of the `reflect-ack`/`reflected` message determines
  // the timestamp for when the referred message has been sent.
  //
  // Note 2: This indicates that the referred message has been successfully
  // stored in the message queue of the server. It does NOT indicate that the
  // referred message has been delivered to the intended receiver.
  message Sent {}

  message Update {
    // Conversation ID of the referred message.
    ConversationId conversation = 1;

    // Unique ID of the referred message
    fixed64 message_id = 2;

    // Update type
    oneof update {
      // Mark the referred message as sent
      Sent sent = 3;
    }
  }

  // Updates
  repeated Update updates = 1;
}

// An incoming message, reflected to other devices.
//
//
// When sending this message:
//
// 1. [...]
// 2. Set `nonce` to the nonce of `e2e.message-with-metadata` (or
//    `e2e.legacy-message`) that contained the `body` in encrypted form.
//
// When receiving this message:
//
// 1. [...]
// 2. Add `nonce` to the CSP nonce storage, preventing messages from being
//    replayed.
message IncomingMessage {
  reserved 4;

  // Sender's Threema ID
  string sender_identity = 1;

  // Unique ID of the enclosed message
  fixed64 message_id = 2;

  // Unix-ish timestamp in milliseconds for when the enclosed message has been
  // created.
  //
  // Note: Take this value from the
  // `csp.payload.legacy-message`/`csp.payload.message-with-metadata-box` that
  // enclosed the message.
  uint64 created_at = 3;

  // Enclosed message's type, mapped from `csp.e2e.container.type`
  MessageType type = 5;

  // The message's body, i.e. the unpadded `csp.e2e.container.padded-data`
  bytes body = 6;

  // Nonce the message was encrypted with by the sender (the shared secret
  // derived from the long-term keys).
  //
  // Optional for now, always required in a future version.
  bytes nonce = 7;
}

// Update one or more existing incoming messages.
message IncomingMessageUpdate {
  // Mark the referred message as read.
  //
  // Note: This may only be used when _read receipts_ have been turned off, i.e.
  // as a replacement for reflecting `delivery-receipt` type _read_ (`0x02`).
  message Read {
    // Unix-ish timestamp in milliseconds for when the referred message has been
    // read.
    uint64 at = 1;
  }

  message Update {
    // Conversation ID of the referred message.
    ConversationId conversation = 1;

    // Unique ID of the referred message
    fixed64 message_id = 2;

    // Update type
    oneof update {
      // Mark the referred message as read
      Read read = 3;
    }
  }

  // Updates
  repeated Update updates = 1;
}

// User profile synchronisation message.
message UserProfileSync {
  // Update the user's profile
  message Update {
    sync.UserProfile user_profile = 1;
  }

  // Synchronisation type
  oneof action {
    Update update = 1;
  }
}

// Contact synchronisation message.
message ContactSync {
  // Create a Threema contact.
  message Create {
    sync.Contact contact = 1;
  }

  // Update a Threema contact.
  message Update {
    sync.Contact contact = 1;
  }

  // Delete a Threema contact.
  message Delete {
    string delete_identity = 1;
  }

  // Synchronisation type
  oneof action {
    // Create a Threema contact
    Create create = 1;
    // Update a Threema contact
    Update update = 2;
    // Delete a Threema contact
    Delete delete = 3;
  }
}

// Group synchronisation message.
message GroupSync {
  // Create a group.
  message Create {
    sync.Group group = 1;
  }

  // Update a group.
  message Update {
    sync.Group group = 1;
  }

  // Delete a group.
  message Delete {
    // Unique group identity
    common.GroupIdentity group_identity = 1;
  }

  // Synchronisation type
  oneof action {
    // Create a group
    Create create = 1;
    // Update a group
    Update update = 2;
    // Delete a group
    Delete delete = 3;
  }
}

// Distribution list synchronisation message.
message DistributionListSync {
  // Create a distribution list.
  message Create {
    sync.DistributionList distribution_list = 1;
  }

  // Update a distribution list.
  message Update {
    sync.DistributionList distribution_list = 1;
  }

  // Delete a distribution list.
  message Delete {
    // Unique ID of the distribution list
    fixed64 distribution_list_id = 1;
  }

  // Synchronisation type
  oneof action {
    // Create a distribution list
    Create create = 1;
    // Update a distribution list
    Update update = 2;
    // Delete a distribution list
    Delete delete = 3;
  }
}

// Settings synchronisation message.
message SettingsSync {
  // Update settings.
  message Update {
    sync.Settings settings = 1;
  }

  // Synchronisation type
  oneof action {
    Update update = 1;
  }
}
