syntax = "proto3";

package d2d;

option java_package = "ch.threema.protobuf.d2d";

import "common.proto";
import "md-d2d-sync.proto";

// ## Device to Device Protocol
//
// ### General Information
//
// Encryption format: 24 byte nonce prepended, followed by an NaCl box.
//
// All strings are UTF-8 encoded.



// Data shared across all devices and transmitted during the handshake.
message SharedDeviceData {
  // Random amount of padding, ignored by the receiver
  bytes padding = 1;

  // MDM parameters to be applied on all devices
  sync.MdmParameters mdm_parameters = 2;
}

// Metadata about a device, determined by the device itself.
message DeviceInfo {
  // Random amount of padding, ignored by the receiver
  bytes padding = 1;

  // Platform
  enum Platform {
    // Unknown platform
    UNSPECIFIED = 0;
    // Android
    ANDROID = 1;
    // Apple iOS
    IOS = 2;
    // Desktop application
    DESKTOP = 3;
    // Web application
    WEB = 4;
  }
  Platform platform = 2;

  // Platform details (smartphone model / browser), e.g. "Firefox 91.0.2" or "iPhone 11 Pro"
  string platform_details = 3;

  // App version, e.g. "4.52" (Android) or "4.6.12b2653" (iOS)
  string app_version = 4;

  // User defined device label (e.g. "PC at Work"), may be empty if not set,
  // max 255 characters
  string label = 5;
}

// A transaction scope. Used in the d2m transaction messages.
message TransactionScope {
    enum Scope {
      USER_PROFILE_SYNC = 0;
      CONTACT_SYNC = 1;
      GROUP_SYNC = 2;
      DISTRIBUTION_LIST_SYNC = 3;
      SETTINGS_SYNC = 4;
      NEW_DEVICE_SYNC = 5;
    }
    Scope scope = 1;
}

// Root message
message Envelope {
  // Random amount of padding, ignored by the receiver
  bytes padding = 1;

  // The enveloped reflected message
  oneof content {
    OutgoingMessage outgoing_message = 2;
    OutgoingMessageSent outgoing_message_sent = 3;
    IncomingMessage incoming_message = 4;
    UserProfileSync user_profile_sync = 5;
    ContactSync contact_sync = 6;
    GroupSync group_sync = 7;
    DistributionListSync distribution_list_sync = 8;
    SettingsSync settings_sync = 9;
  };
}



// Message type as defined by the Chat Server Protocol.
enum MessageType {
  // Invalid message type
  INVALID = 0x00;

  // Text message
  TEXT = 0x01;
  // Deprecated image message
  DEPRECATED_IMAGE = 0x02;
  // Location message
  LOCATION = 0x10;
  // Deprecated audio message
  DEPRECATED_AUDIO = 0x14;
  // Deprecated video message
  DEPRECATED_VIDEO = 0x13;
  // File message
  FILE = 0x17;
  // Create or finalise a poll
  POLL_SETUP = 0x15;
  // Cast a vote on a poll
  POLL_VOTE = 0x16;
  // Call offer
  CALL_OFFER = 0x60;
  // Call answer
  CALL_ANSWER = 0x61;
  // Call ICE Candidate
  CALL_ICE_CANDIDATE = 0x62;
  // Call hangup
  CALL_HANGUP = 0x63;
  // Call ringing
  CALL_RINGING = 0x64;

  // Delivery receipt
  DELIVERY_RECEIPT = 0x80;
  // Typing indicator
  TYPING_INDICATOR = 0x90;

  // Set profile picture of a contact
  CONTACT_SET_PROFILE_PICTURE = 0x18;
  // Delete profile picture of a contact
  CONTACT_DELETE_PROFILE_PICTURE = 0x19;
  // Request profile picture of a contact
  CONTACT_REQUEST_PROFILE_PICTURE = 0x1a;

  // Announce a group's setup
  GROUP_SETUP = 0x4a;
  // Rename a group
  GROUP_RENAME = 0x4b;
  // Leave a group
  GROUP_LEAVE = 0x4c;
  // Set a group's profile picture
  GROUP_SET_PROFILE_PICTURE = 0x50;
  // Delete a group's profile picture
  GROUP_DELETE_PROFILE_PICTURE = 0x54;
  // Request group synchronisation
  GROUP_REQUEST_SYNC = 0x51;

  // Group text message
  GROUP_TEXT = 0x41;
  // Group location message
  GROUP_LOCATION = 0x42;
  // Group image message
  GROUP_IMAGE = 0x43;
  // Group audio message
  GROUP_AUDIO = 0x45;
  // Group video message
  GROUP_VIDEO = 0x44;
  // Group file message
  GROUP_FILE = 0x46;
  // Create or finalise a group poll
  GROUP_POLL_SETUP = 0x52;
  // Cast a vote on a group poll
  GROUP_POLL_VOTE = 0x53;
}

// A message receiver can be a single user or a group.
message MessageReceiver {
  // The recipient's Threema ID or a group identity.
  oneof receiver {
    string identity = 1;
    fixed64 distribution_list = 2;
    common.GroupIdentity group = 3;
  }
}

// An outgoing message, reflected to other devices.
message OutgoingMessage {
  // Recipient of the enclosed message.
  //
  // Note: If the receiver is a group identity, group and group creator id of
  //       the enclosed message must match the values of the supplied group
  //       identity. Otherwise, the message must be considered invalid.
  MessageReceiver receiver = 1;

  // Unique ID of the enclosed message
  fixed64 message_id = 2;

  // Unix-ish timestamp in milliseconds for when the message has been created
  uint64 created_at = 3;

  // Enclosed message's type
  MessageType type = 4;

  // The message's body as defined for `Message` (0x01/0x02) of the Chat
  // Server Protocol.
  bytes body = 5;
}

// An outgoing message has been acknowledged by the chat server.
//
// Note 1: The timestamp of the `reflect`/`reflect-ack` determines the
//         timestamp for when the message has been sent.
// Note 2: This indicates that the message has been successfully stored in the
//         message queue of the server. It does NOT indicate that the message
//         has been delivered to the intended receiver.
message OutgoingMessageSent {
  // Recipient of the sent message.
  MessageReceiver receiver = 1;

  // Unique ID of the sent message
  fixed64 message_id = 2;
}

// An incoming message, reflected to other devices.
//
// Note: The timestamp of the `reflect`/`reflect-ack` determines the timestamp
//       for when the message has been received.
message IncomingMessage {
  // Sender's Threema ID
  string sender_identity = 1;

  // Unique ID of the enclosed message
  fixed64 message_id = 2;

  // Unix-ish timestamp in milliseconds for when the message has been created
  // Note: Take this value from the CSP `message` struct.
  uint64 created_at = 3;

  // Enclosed message's type
  MessageType type = 5;

  // The message's body as defined for `Message` (0x01/0x02) of the Chat
  // Server Protocol.
  bytes body = 6;
}

// User profile synchronisation message.
message UserProfileSync {
  // Update the user's profile
  message Set {
    sync.UserProfile user_profile = 1;
  }

  // Synchronisation type
  oneof action {
    Set set = 1;
  }
}

// Contact synchronisation message.
message ContactSync {
  // Set a Threema contact
  message Set {
    sync.Contact contact = 1;
  }

  // Delete a Threema contact
  message Delete {
    string delete_identity = 1;
  }

  // Synchronisation type
  oneof action {
    Set set = 1;
    Delete delete = 2;
  }
}

// Group synchronisation message.
message GroupSync {
  // Set a group
  message Set {
    sync.Group group = 1;
  }

  // Delete a group
  message Delete {
    // Unique group identity
    common.GroupIdentity group_identity = 1;
  }

  // Synchronisation type
  oneof action {
    Set set = 1;
    Delete delete = 2;
  }
}

// Distribution list synchronisation message.
message DistributionListSync {
  // Set a distribution list
  message Set {
    sync.DistributionList distribution_list = 1;
  }

  // Delete a group
  message Delete {
    // Unique ID of the distribution list
    fixed64 distribution_list_id = 1;
  }

  // Synchronisation type
  oneof action {
    Set set = 1;
    Delete delete = 2;
  }
}

// Settings synchronisation message.
message SettingsSync {
  // Apply settings
  message Set {
    sync.Settings settings = 1;
  }

  // Synchronisation type
  oneof action {
    Set set = 1;
  }
}
